//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.488
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Okazuki.MVVMRxSample
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using Okazuki.MVVMRxSample.Web;
    
    
    /// <summary>
    /// RIA アプリケーションのコンテキスト。
    /// </summary>
    /// <remarks>
    /// このコンテキストは、基本アプリケーションを拡張して、アプリケーションのサービスと型を
    /// コードや xaml から使用できるようにします。
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region 拡張メソッドの定義

        /// <summary>
        /// このメソッドは、初期化の完了時にコンストラクターから 1 回だけ呼び出されるもので、
        /// その後のオブジェクトの設定に使用できます。
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// WebContext クラスの新しいインスタンスを初期化します。
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 現在のアプリケーションに有効期限オブジェクトとして登録されているコンテキストを取得します。
        /// </summary>
        /// 現在のアプリケーションがない場合、
        /// コンテキストが追加されていない場合、または複数のコンテキストが追加されている場合は、<exception cref="InvalidOperationException"> がスローされます。
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// 認証済みの ID を表すユーザーを取得します。
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace Okazuki.MVVMRxSample.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    /// <summary>
    /// 'AuthenticationDomainService' DomainService に対応する DomainContext。
    /// </summary>
    public sealed partial class AuthenticationDomainContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region 拡張メソッドの定義

        /// <summary>
        /// このメソッドは、初期化の完了時にコンストラクターから 1 回だけ呼び出されるもので、
        /// その後のオブジェクトの設定に使用できます。
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// <see cref="AuthenticationDomainContext"/> クラスの新しいインスタンスを初期化します。
        /// </summary>
        public AuthenticationDomainContext() : 
                this(new WebDomainClient<IAuthenticationDomainServiceContract>(new Uri("Okazuki-MVVMRxSample-Web-AuthenticationDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 指定したサービス URI を使用して <see cref="AuthenticationDomainContext"/> クラスの新しいインスタンスを初期化します。
        /// </summary>
        /// <param name="serviceUri">AuthenticationDomainService サービス URI.</param>
        public AuthenticationDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 指定された <paramref name="domainClient"/> を使用して <see cref="AuthenticationDomainContext"/> クラスの新しいインスタンスを初期化します。
        /// </summary>
        /// <param name="domainClient">この DomainContext で使用する DomainClient インスタンス。</param>
        public AuthenticationDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// この <see cref="AuthenticationDomainContext"/> インスタンスに読み込まれた一連の <see cref="User"/> エンティティ インスタンスを取得します。
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// 'GetUser' クエリを使用して <see cref="User"/> エンティティ インスタンスを呼び出すために使用できる EntityQuery インスタンスを取得します。
        /// </summary>
        /// <returns><see cref="User"/> エンティティ インスタンスを取得するために読み込みことができる EntityQuery。</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// 'Login' クエリを使用して <see cref="User"/> エンティティ インスタンスを呼び出すために使用できる EntityQuery インスタンスを取得します。
        /// </summary>
        /// <param name="userName">クエリの 'userName' パラメーターの値。</param>
        /// <param name="password">クエリの 'password' パラメーターの値。</param>
        /// <param name="isPersistent">クエリの 'isPersistent' パラメーターの値。</param>
        /// <param name="customData">クエリの 'customData' パラメーターの値。</param>
        /// <returns><see cref="User"/> エンティティ インスタンスを取得するために読み込みことができる EntityQuery。</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// 'Logout' クエリを使用して <see cref="User"/> エンティティ インスタンスを呼び出すために使用できる EntityQuery インスタンスを取得します。
        /// </summary>
        /// <returns><see cref="User"/> エンティティ インスタンスを取得するために読み込みことができる EntityQuery。</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// この DomainContext の EntitySets の新しい EntityContainer を作成します。
        /// </summary>
        /// <returns>新しいコンテナー インスタンスです。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationDomainContextEntityContainer();
        }
        
        /// <summary>
        /// 'AuthenticationDomainService' DomainService の Service コントラクト。
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationDomainServiceContract
        {
            
            /// <summary>
            /// 'GetUser' 操作を非同期で呼び出します。
            /// </summary>
            /// <param name="callback">完了時に呼び出すコールバック。</param>
            /// <param name="asyncState">オプションの状態オブジェクト。</param>
            /// <returns>要求の監視に使用できる IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/GetUser", ReplyAction="http://tempuri.org/AuthenticationDomainService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 'BeginGetUser' によって開始された非同期の操作を完了します。
            /// </summary>
            /// <param name="result">'BeginGetUser' から返された IAsyncResult。</param>
            /// <returns>'GetUser' 操作から返された 'QueryResult'。</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// 'Login' 操作を非同期で呼び出します。
            /// </summary>
            /// <param name="userName">このアクションの 'userName' パラメーターの値。</param>
            /// <param name="password">このアクションの 'password' パラメーターの値。</param>
            /// <param name="isPersistent">このアクションの 'isPersistent' パラメーターの値。</param>
            /// <param name="customData">このアクションの 'customData' パラメーターの値。</param>
            /// <param name="callback">完了時に呼び出すコールバック。</param>
            /// <param name="asyncState">オプションの状態オブジェクト。</param>
            /// <returns>要求の監視に使用できる IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/Login", ReplyAction="http://tempuri.org/AuthenticationDomainService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 'BeginLogin' によって開始された非同期の操作を完了します。
            /// </summary>
            /// <param name="result">'BeginLogin' から返された IAsyncResult。</param>
            /// <returns>'Login' 操作から返された 'QueryResult'。</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// 'Logout' 操作を非同期で呼び出します。
            /// </summary>
            /// <param name="callback">完了時に呼び出すコールバック。</param>
            /// <param name="asyncState">オプションの状態オブジェクト。</param>
            /// <returns>要求の監視に使用できる IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/Logout", ReplyAction="http://tempuri.org/AuthenticationDomainService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 'BeginLogout' によって開始された非同期の操作を完了します。
            /// </summary>
            /// <param name="result">'BeginLogout' から返された IAsyncResult。</param>
            /// <returns>'Logout' 操作から返された 'QueryResult'。</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// 'SubmitChanges' 操作を非同期で呼び出します。
            /// </summary>
            /// <param name="changeSet">送信する変更セット。</param>
            /// <param name="callback">完了時に呼び出すコールバック。</param>
            /// <param name="asyncState">オプションの状態オブジェクト。</param>
            /// <returns>要求の監視に使用できる IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 'BeginSubmitChanges' によって開始された非同期の操作を完了します。
            /// </summary>
            /// <param name="result">'BeginSubmitChanges' から返された IAsyncResult。</param>
            /// <returns>'SubmitChanges' から返された変更セット エントリ要素のコレクション。</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationDomainContextEntityContainer : EntityContainer
        {
            
            public AuthenticationDomainContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// 'User' エンティティ クラス。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Okazuki.MVVMRxSample.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        private string _userDepartment;
        
        private string _userName;
        
        #region 拡張メソッドの定義

        /// <summary>
        /// このメソッドは、初期化の完了時にコンストラクターから 1 回だけ呼び出されるもので、
        /// その後のオブジェクトの設定に使用できます。
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();
        partial void OnUserDepartmentChanging(string value);
        partial void OnUserDepartmentChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// <see cref="User"/> クラスの新しいインスタンスを初期化します。
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 'Name' の値を取得または設定します。
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// 'Roles' の値を取得または設定します。
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        /// <summary>
        /// 'UserDepartment' の値を取得または設定します。
        /// </summary>
        [DataMember()]
        public string UserDepartment
        {
            get
            {
                return this._userDepartment;
            }
            set
            {
                if ((this._userDepartment != value))
                {
                    this.OnUserDepartmentChanging(value);
                    this.RaiseDataMemberChanging("UserDepartment");
                    this.ValidateProperty("UserDepartment", value);
                    this._userDepartment = value;
                    this.RaiseDataMemberChanged("UserDepartment");
                    this.OnUserDepartmentChanged();
                }
            }
        }
        
        /// <summary>
        /// 'UserName' の値を取得または設定します。
        /// </summary>
        [DataMember()]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// ID が認証済みであるかどうかを示す値を取得します。
        /// </summary>
        /// <remarks>
        /// この値は、<see cref="Name"/> が <c>null</c> または空でない場合に <c>true</c> になります。
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// このエンティティ インスタンスを一意に識別する値をキー フィールドから算出します。
        /// </summary>
        /// <returns>このエンティティ インスタンスを一意に識別するオブジェクト インスタンス。</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// プリンシパルにそのロールが割り当てられているかどうかを返します。
        /// </summary>
        /// <remarks>
        /// 指定されたロールがロールに含まれているかどうかを返します。
        /// この実装では、大文字と小文字が区別されます。
        /// </remarks>
        /// <param name="role">メンバーシップをチェックするロールの名前。</param>
        /// <returns>プリンシパルにロールが割り当てられているかどうか。</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
}
